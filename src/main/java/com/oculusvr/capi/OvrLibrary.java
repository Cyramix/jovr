package com.oculusvr.capi;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;

import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
/**
 * JNA Wrapper for library <b>com.oculusvr.capi</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class OvrLibrary implements Library {
    public static final String JNA_LIBRARY_NAME = "LibOVRRT64_0_5.dll";
//    static {
//        Native.register(OvrLibrary.class, OvrLibrary.JNA_NATIVE_LIB);
//    }
       public static final OvrLibrary INSTANCE = (OvrLibrary) Native.loadLibrary(JNA_LIBRARY_NAME, OvrLibrary.class);

       public static interface ovrHmdType {
        public static final int ovrHmd_None = 0;
        public static final int ovrHmd_DK1 = 3;
        public static final int ovrHmd_DKHD = 4;
        public static final int ovrHmd_DK2 = 6;
        public static final int ovrHmd_BlackStar = 7;
        public static final int ovrHmd_CB = 8;
        public static final int ovrHmd_Other = 9;
        public static final int ovrHmd_EnumSize = 0x7fffffff;
    };
    public static interface ovrHmdCaps {
        public static final int ovrHmdCap_Present = 0x0001;
        public static final int ovrHmdCap_Available = 0x0002;
        public static final int ovrHmdCap_Captured = 0x0004;
        public static final int ovrHmdCap_ExtendDesktop = 0x0008;
        public static final int ovrHmdCap_DebugDevice = 0x0010;
        public static final int ovrHmdCap_NoMirrorToWindow = 0x2000;
        public static final int ovrHmdCap_DisplayOff = 0x0040;
        public static final int ovrHmdCap_LowPersistence = 0x0080;
        public static final int ovrHmdCap_DynamicPrediction = 0x0200;
        public static final int ovrHmdCap_NoVSync = 0x1000;
        public static final int ovrHmdCap_Writable_Mask = OvrLibrary.ovrHmdCaps.ovrHmdCap_NoMirrorToWindow | OvrLibrary.ovrHmdCaps.ovrHmdCap_DisplayOff | OvrLibrary.ovrHmdCaps.ovrHmdCap_LowPersistence | OvrLibrary.ovrHmdCaps.ovrHmdCap_DynamicPrediction | OvrLibrary.ovrHmdCaps.ovrHmdCap_NoVSync;
        public static final int ovrHmdCap_Service_Mask = OvrLibrary.ovrHmdCaps.ovrHmdCap_NoMirrorToWindow | OvrLibrary.ovrHmdCaps.ovrHmdCap_DisplayOff | OvrLibrary.ovrHmdCaps.ovrHmdCap_LowPersistence | OvrLibrary.ovrHmdCaps.ovrHmdCap_DynamicPrediction;
        public static final int ovrHmdCap_EnumSize = 0x7fffffff;
    };
    public static interface ovrTrackingCaps {
        public static final int ovrTrackingCap_Orientation = 0x0010;
        public static final int ovrTrackingCap_MagYawCorrection = 0x0020;
        public static final int ovrTrackingCap_Position = 0x0040;
        public static final int ovrTrackingCap_Idle = 0x0100;
        public static final int ovrTrackingCap_EnumSize = 0x7fffffff;
    };
    public static interface ovrDistortionCaps {
        public static final int ovrDistortionCap_TimeWarp = 0x02;
        public static final int ovrDistortionCap_Vignette = 0x08;
        public static final int ovrDistortionCap_NoRestore = 0x10;
        public static final int ovrDistortionCap_FlipInput = 0x20;
        public static final int ovrDistortionCap_SRGB = 0x40;
        public static final int ovrDistortionCap_Overdrive = 0x80;
        public static final int ovrDistortionCap_HqDistortion = 0x100;
        public static final int ovrDistortionCap_LinuxDevFullscreen = 0x200;
        public static final int ovrDistortionCap_ComputeShader = 0x400;
        public static final int ovrDistortionCap_TimewarpJitDelay = 0x1000;
        public static final int ovrDistortionCap_ProfileNoSpinWaits = 0x10000;
        public static final int ovrDistortionCap_EnumSize = 0x7fffffff;
    };
    public static interface ovrEyeType {
        public static final int ovrEye_Left = 0;
        public static final int ovrEye_Right = 1;
        public static final int ovrEye_Count = 2;
        public static final int ovrEye_EnumSize = 0x7fffffff;
    };
    public static interface ovrStatusBits {
        public static final int ovrStatus_OrientationTracked = 0x0001;
        public static final int ovrStatus_PositionTracked = 0x0002;
        public static final int ovrStatus_CameraPoseTracked = 0x0004;
        public static final int ovrStatus_PositionConnected = 0x0020;
        public static final int ovrStatus_HmdConnected = 0x0080;
        public static final int ovrStatus_EnumSize = 0x7fffffff;
    };
    public static interface ovrRenderAPIType {
        public static final int ovrRenderAPI_None = 0;
        public static final int ovrRenderAPI_OpenGL = 1;
        public static final int ovrRenderAPI_Android_GLES = 2;
        public static final int ovrRenderAPI_D3D9 = 3;
        public static final int ovrRenderAPI_D3D10 = 4;
        public static final int ovrRenderAPI_D3D11 = 5;
        public static final int ovrRenderAPI_Count = 6;
        public static final int ovrRenderAPI_EnumSize = 0x7fffffff;
    };
    public static interface ovrInitFlags {
        public static final int ovrInit_Debug = 0x00000001;
        public static final int ovrInit_ServerOptional = 0x00000002;
        public static final int ovrInit_RequestVersion = 0x00000004;
        public static final int ovrInit_ForceNoDebug = 0x00000008;
    };
    public static interface ovrLogLevel {
        public static final int ovrLogLevel_Debug = 0;
        public static final int ovrLogLevel_Info = 1;
        public static final int ovrLogLevel_Error = 2;
    };
    public static final String OVR_KEY_USER = "User";
    public static final String OVR_KEY_NAME = "Name";
    public static final String OVR_KEY_GENDER = "Gender";
    public static final String OVR_KEY_PLAYER_HEIGHT = "PlayerHeight";
    public static final String OVR_KEY_EYE_HEIGHT = "EyeHeight";
    public static final String OVR_KEY_IPD = "IPD";
    public static final String OVR_KEY_NECK_TO_EYE_DISTANCE = "NeckEyeDistance";
    public static final String OVR_KEY_EYE_RELIEF_DIAL = "EyeReliefDial";
    public static final String OVR_KEY_EYE_TO_NOSE_DISTANCE = "EyeToNoseDist";
    public static final String OVR_KEY_MAX_EYE_TO_PLATE_DISTANCE = "MaxEyeToPlateDist";
    public static final String OVR_KEY_EYE_CUP = "EyeCup";
    public static final String OVR_KEY_CUSTOM_EYE_RENDER = "CustomEyeRender";
    public static final String OVR_KEY_CAMERA_POSITION = "CenteredFromWorld";
    public static final String OVR_DEFAULT_GENDER = "Unknown";
    public static final float OVR_DEFAULT_PLAYER_HEIGHT = 1.778f;
    public static final float OVR_DEFAULT_EYE_HEIGHT = 1.675f;
    public static final float OVR_DEFAULT_IPD = 0.064f;
    public static final float OVR_DEFAULT_NECK_TO_EYE_HORIZONTAL = 0.0805f;
    public static final float OVR_DEFAULT_NECK_TO_EYE_VERTICAL = 0.075f;
    public static final int OVR_DEFAULT_EYE_RELIEF_DIAL = 3;
    /**
     * define<br>
     * Conversion Error : { 0, 0, 0, 1, 0, 0, 0 }<br>
     * SKIPPED:<br>
     * <i>native declaration : line 0</i><br>
     * { 0, 0, 0, 1, 0, 0, 0 }
     */
    public static final int ovrFalse = 0;
    public static final int ovrTrue = 1;
    public interface ovrLogCallback extends Callback {
        void apply(int level, Pointer message);
    };
    public static native byte ovr_InitializeRenderingShimVersion(int requestedMinorVersion);
    public static native byte ovr_InitializeRenderingShim();
    public static native byte ovr_Initialize(InitParams params);
    public static native void ovr_Shutdown();
    public static native Pointer ovr_GetVersionString();
    public static native int ovrHmd_Detect();
    public static native Hmd ovrHmd_Create(int index);
    public static native void ovrHmd_Destroy(Hmd hmd);
    public static native Hmd ovrHmd_CreateDebug(int type);
    public static native String ovrHmd_GetLastError(Hmd hmd);
    public static native byte ovrHmd_AttachToWindow(Hmd hmd, Pointer window, OvrRecti destMirrorRect, OvrRecti sourceRenderTargetRect);
    public static native int ovrHmd_GetEnabledCaps(Hmd hmd);
    public static native void ovrHmd_SetEnabledCaps(Hmd hmd, int hmdCaps);
    public static native byte ovrHmd_ConfigureTracking(Hmd hmd, int supportedTrackingCaps, int requiredTrackingCaps);
    public static native void ovrHmd_RecenterPose(Hmd hmd);
    public static native TrackingState.ByValue ovrHmd_GetTrackingState(Hmd hmd, double absTime);
    public static native com.oculusvr.capi.OvrSizei.ByValue ovrHmd_GetFovTextureSize(Hmd hmd, int eye, FovPort.ByValue fov, float pixelsPerDisplayPixel);
    public static native byte ovrHmd_ConfigureRendering(Hmd hmd, RenderAPIConfig apiConfig, int distortionCaps, FovPort eyeFovIn[], EyeRenderDesc eyeRenderDescOut[]);
    public static native com.oculusvr.capi.FrameTiming.ByValue ovrHmd_BeginFrame(Hmd hmd, int frameIndex);
    public static native void ovrHmd_EndFrame(Hmd hmd, Posef renderPose[], GLTexture eyeTexture[]);
    public static native void ovrHmd_GetEyePoses(Hmd hmd, int frameIndex, OvrVector3f hmdToEyeViewOffset[], Posef outEyePoses[], TrackingState outHmdTrackingState);
    public static native Posef.ByValue ovrHmd_GetHmdPosePerEye(Hmd hmd, int eye);
    public static native EyeRenderDesc.ByValue ovrHmd_GetRenderDesc(Hmd hmd, int eyeType, FovPort.ByValue fov);
    public static native byte ovrHmd_CreateDistortionMesh(Hmd hmd, int eyeType, FovPort.ByValue fov, int distortionCaps, DistortionMesh meshData);
    public static native byte ovrHmd_CreateDistortionMeshDebug(Hmd Hmd, int eyeType, FovPort.ByValue fov, int distortionCaps, DistortionMesh meshData, float debugEyeReliefOverrideInMetres);
    public static native void ovrHmd_DestroyDistortionMesh(DistortionMesh meshData);
    public static native void ovrHmd_GetRenderScaleAndOffset(FovPort.ByValue fov, com.oculusvr.capi.OvrSizei.ByValue textureSize, OvrRecti.ByValue renderViewport, OvrVector2f uvScaleOffsetOut[]);
    public static native com.oculusvr.capi.FrameTiming.ByValue ovrHmd_GetFrameTiming(Hmd hmd, int frameIndex);
    public static native com.oculusvr.capi.FrameTiming.ByValue ovrHmd_BeginFrameTiming(Hmd hmd, int frameIndex);
    public static native void ovrHmd_EndFrameTiming(Hmd hmd);
    public static native void ovrHmd_ResetFrameTiming(Hmd hmd, int frameIndex);
    public static native void ovrHmd_GetEyeTimewarpMatrices(Hmd hmd, int eye, Posef.ByValue renderPose, OvrMatrix4f twmOut[]);
    public static native void ovrHmd_GetEyeTimewarpMatricesDebug(Hmd Hmd, int eye, Posef.ByValue renderPose, com.oculusvr.capi.OvrQuaternionf.ByValue playerTorsoMotion, OvrMatrix4f twmOut[], double debugTimingOffsetInSeconds);
    public static native double ovr_GetTimeInSeconds();
    public static native byte ovrHmd_ProcessLatencyTest(Hmd hmd, ByteBuffer rgbColorOut);
    public static native Pointer ovrHmd_GetLatencyTestResult(Hmd hmd);
    public static native byte ovrHmd_GetLatencyTest2DrawColor(Hmd Hmd, ByteBuffer rgbColorOut);
    public static native void ovrHmd_GetHSWDisplayState(Hmd hmd, HSWDisplayState hasWarningState);
    public static native byte ovrHmd_DismissHSWDisplay(Hmd hmd);
    public static native byte ovrHmd_GetBool(Hmd hmd, String propertyName, byte defaultVal);
    public static native byte ovrHmd_SetBool(Hmd hmd, String propertyName, byte value);
    public static native int ovrHmd_GetInt(Hmd hmd, String propertyName, int defaultVal);
    public static native byte ovrHmd_SetInt(Hmd hmd, String propertyName, int value);
    public static native float ovrHmd_GetFloat(Hmd hmd, String propertyName, float defaultVal);
    public static native byte ovrHmd_SetFloat(Hmd hmd, String propertyName, float value);
    public static native int ovrHmd_GetFloatArray(Hmd hmd, String propertyName, FloatBuffer values, int arraySize);
    public static native byte ovrHmd_SetFloatArray(Hmd hmd, String propertyName, FloatBuffer values, int arraySize);
    public static native String ovrHmd_GetString(Hmd hmd, String propertyName, String defaultVal);
    public static native byte ovrHmd_SetString(Hmd Hmd, String propertyName, String value);
    public static native int ovr_TraceMessage(int level, String message);
    public static native byte ovrHmd_StartPerfLog(Hmd hmd, String fileName, String userData1);
    public static native byte ovrHmd_StopPerfLog(Hmd hmd);
    /** Pointer to unknown (opaque) type */
    public static class ovrHmdStruct extends PointerType {
        public ovrHmdStruct(Pointer address) {
            super(address);
        }
        public ovrHmdStruct() {
            super();
        }
    };
}
